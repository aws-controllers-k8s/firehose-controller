// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeliveryStreamSpec defines the desired state of DeliveryStream.
type DeliveryStreamSpec struct {

	// The destination in the Serverless offering for Amazon OpenSearch Service.
	// You can specify only one destination.
	AmazonOpenSearchServerlessDestinationConfiguration *AmazonOpenSearchServerlessDestinationConfiguration `json:"amazonOpenSearchServerlessDestinationConfiguration,omitempty"`
	// The destination in Amazon OpenSearch Service. You can specify only one destination.
	AmazonopensearchserviceDestinationConfiguration *AmazonopensearchserviceDestinationConfiguration `json:"amazonopensearchserviceDestinationConfiguration,omitempty"`
	// The top level object for configuring streams with database as a source.
	//
	// Amazon Data Firehose is in preview release and is subject to change.
	DatabaseSourceConfiguration *DatabaseSourceConfiguration `json:"databaseSourceConfiguration,omitempty"`
	// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed
	// for Server-Side Encryption (SSE).
	DeliveryStreamEncryptionConfigurationInput *DeliveryStreamEncryptionConfigurationInput `json:"deliveryStreamEncryptionConfigurationInput,omitempty"`
	// The name of the Firehose stream. This name must be unique per Amazon Web
	// Services account in the same Amazon Web Services Region. If the Firehose
	// streams are in different accounts or different Regions, you can have multiple
	// Firehose streams with the same name.
	//
	// Regex Pattern: `^[a-zA-Z0-9_.-]+$`
	// +kubebuilder:validation:Required
	DeliveryStreamName *string `json:"deliveryStreamName"`
	// The Firehose stream type. This parameter can be one of the following values:
	//
	//   - DirectPut: Provider applications access the Firehose stream directly.
	//
	//   - KinesisStreamAsSource: The Firehose stream uses a Kinesis data stream
	//     as a source.
	DeliveryStreamType *string `json:"deliveryStreamType,omitempty"`
	// The structure that configures parameters such as ThroughputHintInMBs for
	// a stream configured with Direct PUT as a source.
	DirectPutSourceConfiguration *DirectPutSourceConfiguration `json:"directPutSourceConfiguration,omitempty"`
	// The destination in Amazon OpenSearch Service. You can specify only one destination.
	ElasticsearchDestinationConfiguration *ElasticsearchDestinationConfiguration `json:"elasticsearchDestinationConfiguration,omitempty"`
	// The destination in Amazon S3. You can specify only one destination.
	ExtendedS3DestinationConfiguration *ExtendedS3DestinationConfiguration `json:"extendedS3DestinationConfiguration,omitempty"`
	// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint
	// destination. You can specify only one destination.
	HTTPEndpointDestinationConfiguration *HTTPEndpointDestinationConfiguration `json:"httpEndpointDestinationConfiguration,omitempty"`
	// Configure Apache Iceberg Tables destination.
	IcebergDestinationConfiguration *IcebergDestinationConfiguration `json:"icebergDestinationConfiguration,omitempty"`
	// When a Kinesis data stream is used as the source for the Firehose stream,
	// a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon
	// Resource Name (ARN) and the role ARN for the source stream.
	KinesisStreamSourceConfiguration *KinesisStreamSourceConfiguration `json:"kinesisStreamSourceConfiguration,omitempty"`
	MSKSourceConfiguration           *MSKSourceConfiguration           `json:"mSKSourceConfiguration,omitempty"`
	// The destination in Amazon Redshift. You can specify only one destination.
	RedshiftDestinationConfiguration *RedshiftDestinationConfiguration `json:"redshiftDestinationConfiguration,omitempty"`
	// [Deprecated] The destination in Amazon S3. You can specify only one destination.
	S3DestinationConfiguration *S3DestinationConfiguration `json:"s3DestinationConfiguration,omitempty"`
	// Configure Snowflake destination
	SnowflakeDestinationConfiguration *SnowflakeDestinationConfiguration `json:"snowflakeDestinationConfiguration,omitempty"`
	// The destination in Splunk. You can specify only one destination.
	SplunkDestinationConfiguration *SplunkDestinationConfiguration `json:"splunkDestinationConfiguration,omitempty"`
	// A set of tags to assign to the Firehose stream. A tag is a key-value pair
	// that you can define and assign to Amazon Web Services resources. Tags are
	// metadata. For example, you can add friendly names and descriptions or other
	// types of information that can help you distinguish the Firehose stream. For
	// more information about tags, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide.
	//
	// You can specify up to 50 tags when creating a Firehose stream.
	//
	// If you specify tags in the CreateDeliveryStream action, Amazon Data Firehose
	// performs an additional authorization on the firehose:TagDeliveryStream action
	// to verify if users have permissions to create tags. If you do not provide
	// this permission, requests to create new Firehose streams with IAM resource
	// tags will fail with an AccessDeniedException such as following.
	//
	// # AccessDeniedException
	//
	// User: arn:aws:sts::x:assumed-role/x/x is not authorized to perform: firehose:TagDeliveryStream
	// on resource: arn:aws:firehose:us-east-1:x:deliverystream/x with an explicit
	// deny in an identity-based policy.
	//
	// For an example IAM policy, see Tag example. (https://docs.aws.amazon.com/firehose/latest/APIReference/API_CreateDeliveryStream.html#API_CreateDeliveryStream_Examples)
	Tags []*Tag `json:"tags,omitempty"`
}

// DeliveryStreamStatus defines the observed state of DeliveryStream
type DeliveryStreamStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// DeliveryStream is the Schema for the DeliveryStreams API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type DeliveryStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeliveryStreamSpec   `json:"spec,omitempty"`
	Status            DeliveryStreamStatus `json:"status,omitempty"`
}

// DeliveryStreamList contains a list of DeliveryStream
// +kubebuilder:object:root=true
type DeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeliveryStream `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DeliveryStream{}, &DeliveryStreamList{})
}
