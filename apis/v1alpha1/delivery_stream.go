// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeliveryStreamSpec defines the desired state of DeliveryStream.
type DeliveryStreamSpec struct {

	// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed
	// for Server-Side Encryption (SSE).
	DeliveryStreamEncryptionConfiguration *DeliveryStreamEncryptionConfigurationInput `json:"deliveryStreamEncryptionConfiguration,omitempty"`
	// The name of the Firehose stream. This name must be unique per Amazon Web
	// Services account in the same Amazon Web Services Region. If the Firehose
	// streams are in different accounts or different Regions, you can have multiple
	// Firehose streams with the same name.
	//
	// Regex Pattern: `^[a-zA-Z0-9_.-]+$`
	// +kubebuilder:validation:Required
	DeliveryStreamName *string `json:"deliveryStreamName"`
	// The Firehose stream type. This parameter can be one of the following values:
	//
	//   - DirectPut: Provider applications access the Firehose stream directly.
	//
	//   - KinesisStreamAsSource: The Firehose stream uses a Kinesis data stream
	//     as a source.
	DeliveryStreamType *string `json:"deliveryStreamType,omitempty"`
	// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint
	// destination. You can specify only one destination.
	HTTPEndpointDestinationConfiguration *HTTPEndpointDestinationConfiguration `json:"httpEndpointDestinationConfiguration,omitempty"`
	// A set of tags to assign to the Firehose stream. A tag is a key-value pair
	// that you can define and assign to Amazon Web Services resources. Tags are
	// metadata. For example, you can add friendly names and descriptions or other
	// types of information that can help you distinguish the Firehose stream. For
	// more information about tags, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide.
	//
	// You can specify up to 50 tags when creating a Firehose stream.
	//
	// If you specify tags in the CreateDeliveryStream action, Amazon Data Firehose
	// performs an additional authorization on the firehose:TagDeliveryStream action
	// to verify if users have permissions to create tags. If you do not provide
	// this permission, requests to create new Firehose streams with IAM resource
	// tags will fail with an AccessDeniedException such as following.
	//
	// # AccessDeniedException
	//
	// User: arn:aws:sts::x:assumed-role/x/x is not authorized to perform: firehose:TagDeliveryStream
	// on resource: arn:aws:firehose:us-east-1:x:deliverystream/x with an explicit
	// deny in an identity-based policy.
	//
	// For an example IAM policy, see Tag example. (https://docs.aws.amazon.com/firehose/latest/APIReference/API_CreateDeliveryStream.html#API_CreateDeliveryStream_Examples)
	Tags []*Tag `json:"tags,omitempty"`
}

// DeliveryStreamStatus defines the observed state of DeliveryStream
type DeliveryStreamStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The date and time that the Firehose stream was created.
	// +kubebuilder:validation:Optional
	CreateTimestamp *metav1.Time `json:"createTimestamp,omitempty"`
	// Provides details in case one of the following operations fails due to an
	// error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,
	// StopDeliveryStreamEncryption.
	// +kubebuilder:validation:Optional
	DeliveryStreamEncryptionConfigurationFailureDescription *FailureDescription `json:"deliveryStreamEncryptionConfigurationFailureDescription,omitempty"`
	// This is the server-side encryption (SSE) status for the Firehose stream.
	// For a full description of the different values of this status, see StartDeliveryStreamEncryption
	// and StopDeliveryStreamEncryption. If this status is ENABLING_FAILED or DISABLING_FAILED,
	// it is the status of the most recent attempt to enable or disable SSE, respectively.
	// +kubebuilder:validation:Optional
	DeliveryStreamEncryptionConfigurationStatus *string `json:"deliveryStreamEncryptionConfigurationStatus,omitempty"`
	// The status of the Firehose stream. If the status of a Firehose stream is
	// CREATING_FAILED, this status doesn't change, and you can't invoke CreateDeliveryStream
	// again on it. However, you can invoke the DeleteDeliveryStream operation to
	// delete it.
	// +kubebuilder:validation:Optional
	DeliveryStreamStatus *string `json:"deliveryStreamStatus,omitempty"`
	// The ID of the destination.
	//
	// Regex Pattern: `^[a-zA-Z0-9-]+$`
	// +kubebuilder:validation:Optional
	DestinationID *string `json:"destinationID,omitempty"`
	// The date and time that the Firehose stream was last updated.
	// +kubebuilder:validation:Optional
	LastUpdateTimestamp *metav1.Time `json:"lastUpdateTimestamp,omitempty"`
	// Each time the destination is updated for a Firehose stream, the version ID
	// is changed, and the current version ID is required when updating the destination.
	// This is so that the service knows it is applying the changes to the correct
	// version of the delivery stream.
	//
	// Regex Pattern: `^[0-9]+$`
	// +kubebuilder:validation:Optional
	VersionID *string `json:"versionID,omitempty"`
}

// DeliveryStream is the Schema for the DeliveryStreams API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type DeliveryStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeliveryStreamSpec   `json:"spec,omitempty"`
	Status            DeliveryStreamStatus `json:"status,omitempty"`
}

// DeliveryStreamList contains a list of DeliveryStream
// +kubebuilder:object:root=true
type DeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeliveryStream `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DeliveryStream{}, &DeliveryStreamList{})
}
