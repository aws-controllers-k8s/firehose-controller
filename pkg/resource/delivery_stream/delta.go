// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package delivery_stream

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration) {
		delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration)
	} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint != nil {
			if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName != nil {
			if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.IndexName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration) {
			delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration)
		} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN)
			} else if a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN != nil && b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				if *a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN != *b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN)
				}
			}
			if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) != len(b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
			} else if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
				}
			}
			if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs) != len(b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs) {
				delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs)
			} else if len(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs) {
					delta.Add("Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration) {
		delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration)
	} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.DomainARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.IndexName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.IndexName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.TypeName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName != nil {
			if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.TypeName", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.TypeName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration) {
			delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration)
		} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN)
			} else if a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN != nil && b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				if *a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN != *b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN)
				}
			}
			if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) != len(b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
			} else if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
				}
			}
			if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs) != len(b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs) {
				delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs)
			} else if len(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs) {
					delta.Add("Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration, b.ko.Spec.DatabaseSourceConfiguration) {
		delta.Add("Spec.DatabaseSourceConfiguration", a.ko.Spec.DatabaseSourceConfiguration, b.ko.Spec.DatabaseSourceConfiguration)
	} else if a.ko.Spec.DatabaseSourceConfiguration != nil && b.ko.Spec.DatabaseSourceConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Columns, b.ko.Spec.DatabaseSourceConfiguration.Columns) {
			delta.Add("Spec.DatabaseSourceConfiguration.Columns", a.ko.Spec.DatabaseSourceConfiguration.Columns, b.ko.Spec.DatabaseSourceConfiguration.Columns)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Columns != nil && b.ko.Spec.DatabaseSourceConfiguration.Columns != nil {
			if len(a.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude) != len(b.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude) {
				delta.Add("Spec.DatabaseSourceConfiguration.Columns.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude) {
					delta.Add("Spec.DatabaseSourceConfiguration.Columns.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Columns.Exclude)
				}
			}
			if len(a.ko.Spec.DatabaseSourceConfiguration.Columns.Include) != len(b.ko.Spec.DatabaseSourceConfiguration.Columns.Include) {
				delta.Add("Spec.DatabaseSourceConfiguration.Columns.Include", a.ko.Spec.DatabaseSourceConfiguration.Columns.Include, b.ko.Spec.DatabaseSourceConfiguration.Columns.Include)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Columns.Include) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Columns.Include, b.ko.Spec.DatabaseSourceConfiguration.Columns.Include) {
					delta.Add("Spec.DatabaseSourceConfiguration.Columns.Include", a.ko.Spec.DatabaseSourceConfiguration.Columns.Include, b.ko.Spec.DatabaseSourceConfiguration.Columns.Include)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration) {
			delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration)
		} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration) {
				delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration)
			} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled) {
					delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled)
				} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled != nil {
					if *a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled != *b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled {
						delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN) {
					delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN)
				} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
					if *a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN != *b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN {
						delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.RoleARN)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN) {
					delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN)
				} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
					if *a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN != *b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN {
						delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceAuthenticationConfiguration.SecretsManagerConfiguration.SecretARN)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration) {
			delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration)
		} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName) {
				delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName)
			} else if a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName != nil && b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName != nil {
				if *a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName != *b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName {
					delta.Add("Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName", a.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName, b.ko.Spec.DatabaseSourceConfiguration.DatabaseSourceVPCConfiguration.VPCEndpointServiceName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Databases, b.ko.Spec.DatabaseSourceConfiguration.Databases) {
			delta.Add("Spec.DatabaseSourceConfiguration.Databases", a.ko.Spec.DatabaseSourceConfiguration.Databases, b.ko.Spec.DatabaseSourceConfiguration.Databases)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Databases != nil && b.ko.Spec.DatabaseSourceConfiguration.Databases != nil {
			if len(a.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude) != len(b.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude) {
				delta.Add("Spec.DatabaseSourceConfiguration.Databases.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude) {
					delta.Add("Spec.DatabaseSourceConfiguration.Databases.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Databases.Exclude)
				}
			}
			if len(a.ko.Spec.DatabaseSourceConfiguration.Databases.Include) != len(b.ko.Spec.DatabaseSourceConfiguration.Databases.Include) {
				delta.Add("Spec.DatabaseSourceConfiguration.Databases.Include", a.ko.Spec.DatabaseSourceConfiguration.Databases.Include, b.ko.Spec.DatabaseSourceConfiguration.Databases.Include)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Databases.Include) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Databases.Include, b.ko.Spec.DatabaseSourceConfiguration.Databases.Include) {
					delta.Add("Spec.DatabaseSourceConfiguration.Databases.Include", a.ko.Spec.DatabaseSourceConfiguration.Databases.Include, b.ko.Spec.DatabaseSourceConfiguration.Databases.Include)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Endpoint, b.ko.Spec.DatabaseSourceConfiguration.Endpoint) {
			delta.Add("Spec.DatabaseSourceConfiguration.Endpoint", a.ko.Spec.DatabaseSourceConfiguration.Endpoint, b.ko.Spec.DatabaseSourceConfiguration.Endpoint)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Endpoint != nil && b.ko.Spec.DatabaseSourceConfiguration.Endpoint != nil {
			if *a.ko.Spec.DatabaseSourceConfiguration.Endpoint != *b.ko.Spec.DatabaseSourceConfiguration.Endpoint {
				delta.Add("Spec.DatabaseSourceConfiguration.Endpoint", a.ko.Spec.DatabaseSourceConfiguration.Endpoint, b.ko.Spec.DatabaseSourceConfiguration.Endpoint)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Port, b.ko.Spec.DatabaseSourceConfiguration.Port) {
			delta.Add("Spec.DatabaseSourceConfiguration.Port", a.ko.Spec.DatabaseSourceConfiguration.Port, b.ko.Spec.DatabaseSourceConfiguration.Port)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Port != nil && b.ko.Spec.DatabaseSourceConfiguration.Port != nil {
			if *a.ko.Spec.DatabaseSourceConfiguration.Port != *b.ko.Spec.DatabaseSourceConfiguration.Port {
				delta.Add("Spec.DatabaseSourceConfiguration.Port", a.ko.Spec.DatabaseSourceConfiguration.Port, b.ko.Spec.DatabaseSourceConfiguration.Port)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.SSLMode, b.ko.Spec.DatabaseSourceConfiguration.SSLMode) {
			delta.Add("Spec.DatabaseSourceConfiguration.SSLMode", a.ko.Spec.DatabaseSourceConfiguration.SSLMode, b.ko.Spec.DatabaseSourceConfiguration.SSLMode)
		} else if a.ko.Spec.DatabaseSourceConfiguration.SSLMode != nil && b.ko.Spec.DatabaseSourceConfiguration.SSLMode != nil {
			if *a.ko.Spec.DatabaseSourceConfiguration.SSLMode != *b.ko.Spec.DatabaseSourceConfiguration.SSLMode {
				delta.Add("Spec.DatabaseSourceConfiguration.SSLMode", a.ko.Spec.DatabaseSourceConfiguration.SSLMode, b.ko.Spec.DatabaseSourceConfiguration.SSLMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable, b.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable) {
			delta.Add("Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable", a.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable, b.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable)
		} else if a.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable != nil && b.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable != nil {
			if *a.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable != *b.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable {
				delta.Add("Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable", a.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable, b.ko.Spec.DatabaseSourceConfiguration.SnapshotWatermarkTable)
			}
		}
		if len(a.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys) != len(b.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys) {
			delta.Add("Spec.DatabaseSourceConfiguration.SurrogateKeys", a.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys, b.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys)
		} else if len(a.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys, b.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys) {
				delta.Add("Spec.DatabaseSourceConfiguration.SurrogateKeys", a.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys, b.ko.Spec.DatabaseSourceConfiguration.SurrogateKeys)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Tables, b.ko.Spec.DatabaseSourceConfiguration.Tables) {
			delta.Add("Spec.DatabaseSourceConfiguration.Tables", a.ko.Spec.DatabaseSourceConfiguration.Tables, b.ko.Spec.DatabaseSourceConfiguration.Tables)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Tables != nil && b.ko.Spec.DatabaseSourceConfiguration.Tables != nil {
			if len(a.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude) != len(b.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude) {
				delta.Add("Spec.DatabaseSourceConfiguration.Tables.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude) {
					delta.Add("Spec.DatabaseSourceConfiguration.Tables.Exclude", a.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude, b.ko.Spec.DatabaseSourceConfiguration.Tables.Exclude)
				}
			}
			if len(a.ko.Spec.DatabaseSourceConfiguration.Tables.Include) != len(b.ko.Spec.DatabaseSourceConfiguration.Tables.Include) {
				delta.Add("Spec.DatabaseSourceConfiguration.Tables.Include", a.ko.Spec.DatabaseSourceConfiguration.Tables.Include, b.ko.Spec.DatabaseSourceConfiguration.Tables.Include)
			} else if len(a.ko.Spec.DatabaseSourceConfiguration.Tables.Include) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.DatabaseSourceConfiguration.Tables.Include, b.ko.Spec.DatabaseSourceConfiguration.Tables.Include) {
					delta.Add("Spec.DatabaseSourceConfiguration.Tables.Include", a.ko.Spec.DatabaseSourceConfiguration.Tables.Include, b.ko.Spec.DatabaseSourceConfiguration.Tables.Include)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DatabaseSourceConfiguration.Type, b.ko.Spec.DatabaseSourceConfiguration.Type) {
			delta.Add("Spec.DatabaseSourceConfiguration.Type", a.ko.Spec.DatabaseSourceConfiguration.Type, b.ko.Spec.DatabaseSourceConfiguration.Type)
		} else if a.ko.Spec.DatabaseSourceConfiguration.Type != nil && b.ko.Spec.DatabaseSourceConfiguration.Type != nil {
			if *a.ko.Spec.DatabaseSourceConfiguration.Type != *b.ko.Spec.DatabaseSourceConfiguration.Type {
				delta.Add("Spec.DatabaseSourceConfiguration.Type", a.ko.Spec.DatabaseSourceConfiguration.Type, b.ko.Spec.DatabaseSourceConfiguration.Type)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeliveryStreamEncryptionConfigurationInput, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput) {
		delta.Add("Spec.DeliveryStreamEncryptionConfigurationInput", a.ko.Spec.DeliveryStreamEncryptionConfigurationInput, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput)
	} else if a.ko.Spec.DeliveryStreamEncryptionConfigurationInput != nil && b.ko.Spec.DeliveryStreamEncryptionConfigurationInput != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN) {
			delta.Add("Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN", a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN)
		} else if a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN != nil && b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN != nil {
			if *a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN != *b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN {
				delta.Add("Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN", a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType) {
			delta.Add("Spec.DeliveryStreamEncryptionConfigurationInput.KeyType", a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType)
		} else if a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType != nil && b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType != nil {
			if *a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType != *b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType {
				delta.Add("Spec.DeliveryStreamEncryptionConfigurationInput.KeyType", a.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType, b.ko.Spec.DeliveryStreamEncryptionConfigurationInput.KeyType)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeliveryStreamName, b.ko.Spec.DeliveryStreamName) {
		delta.Add("Spec.DeliveryStreamName", a.ko.Spec.DeliveryStreamName, b.ko.Spec.DeliveryStreamName)
	} else if a.ko.Spec.DeliveryStreamName != nil && b.ko.Spec.DeliveryStreamName != nil {
		if *a.ko.Spec.DeliveryStreamName != *b.ko.Spec.DeliveryStreamName {
			delta.Add("Spec.DeliveryStreamName", a.ko.Spec.DeliveryStreamName, b.ko.Spec.DeliveryStreamName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeliveryStreamType, b.ko.Spec.DeliveryStreamType) {
		delta.Add("Spec.DeliveryStreamType", a.ko.Spec.DeliveryStreamType, b.ko.Spec.DeliveryStreamType)
	} else if a.ko.Spec.DeliveryStreamType != nil && b.ko.Spec.DeliveryStreamType != nil {
		if *a.ko.Spec.DeliveryStreamType != *b.ko.Spec.DeliveryStreamType {
			delta.Add("Spec.DeliveryStreamType", a.ko.Spec.DeliveryStreamType, b.ko.Spec.DeliveryStreamType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DirectPutSourceConfiguration, b.ko.Spec.DirectPutSourceConfiguration) {
		delta.Add("Spec.DirectPutSourceConfiguration", a.ko.Spec.DirectPutSourceConfiguration, b.ko.Spec.DirectPutSourceConfiguration)
	} else if a.ko.Spec.DirectPutSourceConfiguration != nil && b.ko.Spec.DirectPutSourceConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs, b.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs) {
			delta.Add("Spec.DirectPutSourceConfiguration.ThroughputHintInMBs", a.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs, b.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs)
		} else if a.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs != nil && b.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs != nil {
			if *a.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs != *b.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs {
				delta.Add("Spec.DirectPutSourceConfiguration.ThroughputHintInMBs", a.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs, b.ko.Spec.DirectPutSourceConfiguration.ThroughputHintInMBs)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration) {
		delta.Add("Spec.ElasticsearchDestinationConfiguration", a.ko.Spec.ElasticsearchDestinationConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration)
	} else if a.ko.Spec.ElasticsearchDestinationConfiguration != nil && b.ko.Spec.ElasticsearchDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.BufferingHints", a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint, b.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint", a.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint, b.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint != *b.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint", a.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint, b.ko.Spec.ElasticsearchDestinationConfiguration.ClusterEndpoint)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions", a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat", a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != *b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat", a.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN, b.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.DomainARN", a.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN, b.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.DomainARN", a.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN, b.ko.Spec.ElasticsearchDestinationConfiguration.DomainARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.IndexName, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexName) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.IndexName", a.ko.Spec.ElasticsearchDestinationConfiguration.IndexName, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexName)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.IndexName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.IndexName != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.IndexName != *b.ko.Spec.ElasticsearchDestinationConfiguration.IndexName {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.IndexName", a.ko.Spec.ElasticsearchDestinationConfiguration.IndexName, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod", a.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod != *b.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod", a.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod, b.ko.Spec.ElasticsearchDestinationConfiguration.IndexRotationPeriod)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.RetryOptions", a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode, b.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.S3BackupMode", a.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode, b.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3BackupMode", a.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode, b.ko.Spec.ElasticsearchDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.TypeName, b.ko.Spec.ElasticsearchDestinationConfiguration.TypeName) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.TypeName", a.ko.Spec.ElasticsearchDestinationConfiguration.TypeName, b.ko.Spec.ElasticsearchDestinationConfiguration.TypeName)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.TypeName != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.TypeName != nil {
			if *a.ko.Spec.ElasticsearchDestinationConfiguration.TypeName != *b.ko.Spec.ElasticsearchDestinationConfiguration.TypeName {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.TypeName", a.ko.Spec.ElasticsearchDestinationConfiguration.TypeName, b.ko.Spec.ElasticsearchDestinationConfiguration.TypeName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration) {
			delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration)
		} else if a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN)
			} else if a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN != nil && b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				if *a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN != *b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN)
				}
			}
			if len(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) != len(b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
			} else if len(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs)
				}
			}
			if len(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs) != len(b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs) {
				delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs)
			} else if len(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs) {
					delta.Add("Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs", a.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs, b.ko.Spec.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration) {
		delta.Add("Spec.ExtendedS3DestinationConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration)
	} else if a.ko.Spec.ExtendedS3DestinationConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.BucketARN", a.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.BucketARN", a.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.BucketARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.BufferingHints", a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.CompressionFormat", a.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat != *b.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.CompressionFormat", a.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.CompressionFormat)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone, b.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.CustomTimeZone", a.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone, b.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone != *b.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.CustomTimeZone", a.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone, b.ko.Spec.ExtendedS3DestinationConfiguration.CustomTimeZone)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe) {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe)
					} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe != nil {
						if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats) != len(b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats)
						} else if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats) > 0 {
							if !ackcompare.SliceStringPEqual(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats) {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats)
							}
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe) {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe)
					} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe != nil {
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive)
							}
						}
						if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings) != len(b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings)
						} else if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings) > 0 {
							if !ackcompare.MapStringStringPEqual(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings) {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores)
							}
						}
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe) {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe)
					} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe != nil {
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes)
							}
						}
						if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns) != len(b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns)
						} else if len(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns) > 0 {
							if !ackcompare.SliceStringPEqual(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns) {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes)
							}
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe) {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe)
					} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe != nil {
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion) {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion)
						} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion != nil {
							if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion {
								delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion)
							}
						}
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID != *b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID", a.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID, b.ko.Spec.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled != *b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix", a.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix != *b.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix", a.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.ErrorOutputPrefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension, b.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.FileExtension", a.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension, b.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension != *b.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.FileExtension", a.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension, b.ko.Spec.ExtendedS3DestinationConfiguration.FileExtension)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.Prefix) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.Prefix", a.ko.Spec.ExtendedS3DestinationConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.Prefix)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.Prefix != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.Prefix != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.Prefix != *b.ko.Spec.ExtendedS3DestinationConfiguration.Prefix {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.Prefix", a.ko.Spec.ExtendedS3DestinationConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.Prefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN) {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN)
			} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN != nil {
				if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN {
					delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupMode", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode != nil && b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode != *b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode {
				delta.Add("Spec.ExtendedS3DestinationConfiguration.S3BackupMode", a.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode, b.ko.Spec.ExtendedS3DestinationConfiguration.S3BackupMode)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration) {
		delta.Add("Spec.HTTPEndpointDestinationConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration)
	} else if a.ko.Spec.HTTPEndpointDestinationConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.BufferingHints", a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != *b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != *b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != *b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL", a.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL, b.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration != nil {
			if len(a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes) != len(b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes", a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes)
			} else if len(a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes", a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding", a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != *b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding", a.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding, b.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.RetryOptions", a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3BackupMode", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3BackupMode", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration) {
			delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration)
		} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled != *b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN) {
				delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
			} else if a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil && b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				if *a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != *b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN {
					delta.Add("Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration, b.ko.Spec.IcebergDestinationConfiguration) {
		delta.Add("Spec.IcebergDestinationConfiguration", a.ko.Spec.IcebergDestinationConfiguration, b.ko.Spec.IcebergDestinationConfiguration)
	} else if a.ko.Spec.IcebergDestinationConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.AppendOnly, b.ko.Spec.IcebergDestinationConfiguration.AppendOnly) {
			delta.Add("Spec.IcebergDestinationConfiguration.AppendOnly", a.ko.Spec.IcebergDestinationConfiguration.AppendOnly, b.ko.Spec.IcebergDestinationConfiguration.AppendOnly)
		} else if a.ko.Spec.IcebergDestinationConfiguration.AppendOnly != nil && b.ko.Spec.IcebergDestinationConfiguration.AppendOnly != nil {
			if *a.ko.Spec.IcebergDestinationConfiguration.AppendOnly != *b.ko.Spec.IcebergDestinationConfiguration.AppendOnly {
				delta.Add("Spec.IcebergDestinationConfiguration.AppendOnly", a.ko.Spec.IcebergDestinationConfiguration.AppendOnly, b.ko.Spec.IcebergDestinationConfiguration.AppendOnly)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.BufferingHints, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.IcebergDestinationConfiguration.BufferingHints", a.ko.Spec.IcebergDestinationConfiguration.BufferingHints, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.IcebergDestinationConfiguration.BufferingHints != nil && b.ko.Spec.IcebergDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration) {
			delta.Add("Spec.IcebergDestinationConfiguration.CatalogConfiguration", a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration)
		} else if a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN) {
				delta.Add("Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN", a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN)
			} else if a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN != nil && b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN != *b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN {
					delta.Add("Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN", a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.CatalogARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation) {
				delta.Add("Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation", a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation)
			} else if a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation != nil && b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation != *b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation {
					delta.Add("Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation", a.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation, b.ko.Spec.IcebergDestinationConfiguration.CatalogConfiguration.WarehouseLocation)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if len(a.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList) != len(b.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList) {
			delta.Add("Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList", a.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList, b.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList)
		} else if len(a.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList, b.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList) {
				delta.Add("Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList", a.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList, b.ko.Spec.IcebergDestinationConfiguration.DestinationTableConfigurationList)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.IcebergDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.IcebergDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.RetryOptions, b.ko.Spec.IcebergDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.IcebergDestinationConfiguration.RetryOptions", a.ko.Spec.IcebergDestinationConfiguration.RetryOptions, b.ko.Spec.IcebergDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.IcebergDestinationConfiguration.RetryOptions != nil && b.ko.Spec.IcebergDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.IcebergDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.RoleARN) {
			delta.Add("Spec.IcebergDestinationConfiguration.RoleARN", a.ko.Spec.IcebergDestinationConfiguration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.IcebergDestinationConfiguration.RoleARN != nil && b.ko.Spec.IcebergDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.IcebergDestinationConfiguration.RoleARN != *b.ko.Spec.IcebergDestinationConfiguration.RoleARN {
				delta.Add("Spec.IcebergDestinationConfiguration.RoleARN", a.ko.Spec.IcebergDestinationConfiguration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3BackupMode, b.ko.Spec.IcebergDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.IcebergDestinationConfiguration.S3BackupMode", a.ko.Spec.IcebergDestinationConfiguration.S3BackupMode, b.ko.Spec.IcebergDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.IcebergDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.IcebergDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.IcebergDestinationConfiguration.S3BackupMode != *b.ko.Spec.IcebergDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.IcebergDestinationConfiguration.S3BackupMode", a.ko.Spec.IcebergDestinationConfiguration.S3BackupMode, b.ko.Spec.IcebergDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.IcebergDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration, b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration) {
			delta.Add("Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration", a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration, b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration)
		} else if a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled) {
				delta.Add("Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled)
			} else if a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled != nil && b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled != *b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled {
					delta.Add("Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.SchemaEvolutionConfiguration.Enabled)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration, b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration) {
			delta.Add("Spec.IcebergDestinationConfiguration.TableCreationConfiguration", a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration, b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration)
		} else if a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration != nil && b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled) {
				delta.Add("Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled)
			} else if a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled != nil && b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled != nil {
				if *a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled != *b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled {
					delta.Add("Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled", a.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled, b.ko.Spec.IcebergDestinationConfiguration.TableCreationConfiguration.Enabled)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KinesisStreamSourceConfiguration, b.ko.Spec.KinesisStreamSourceConfiguration) {
		delta.Add("Spec.KinesisStreamSourceConfiguration", a.ko.Spec.KinesisStreamSourceConfiguration, b.ko.Spec.KinesisStreamSourceConfiguration)
	} else if a.ko.Spec.KinesisStreamSourceConfiguration != nil && b.ko.Spec.KinesisStreamSourceConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN, b.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN) {
			delta.Add("Spec.KinesisStreamSourceConfiguration.KinesisStreamARN", a.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN, b.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN)
		} else if a.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN != nil && b.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN != nil {
			if *a.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN != *b.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN {
				delta.Add("Spec.KinesisStreamSourceConfiguration.KinesisStreamARN", a.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN, b.ko.Spec.KinesisStreamSourceConfiguration.KinesisStreamARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.KinesisStreamSourceConfiguration.RoleARN, b.ko.Spec.KinesisStreamSourceConfiguration.RoleARN) {
			delta.Add("Spec.KinesisStreamSourceConfiguration.RoleARN", a.ko.Spec.KinesisStreamSourceConfiguration.RoleARN, b.ko.Spec.KinesisStreamSourceConfiguration.RoleARN)
		} else if a.ko.Spec.KinesisStreamSourceConfiguration.RoleARN != nil && b.ko.Spec.KinesisStreamSourceConfiguration.RoleARN != nil {
			if *a.ko.Spec.KinesisStreamSourceConfiguration.RoleARN != *b.ko.Spec.KinesisStreamSourceConfiguration.RoleARN {
				delta.Add("Spec.KinesisStreamSourceConfiguration.RoleARN", a.ko.Spec.KinesisStreamSourceConfiguration.RoleARN, b.ko.Spec.KinesisStreamSourceConfiguration.RoleARN)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration, b.ko.Spec.MSKSourceConfiguration) {
		delta.Add("Spec.MSKSourceConfiguration", a.ko.Spec.MSKSourceConfiguration, b.ko.Spec.MSKSourceConfiguration)
	} else if a.ko.Spec.MSKSourceConfiguration != nil && b.ko.Spec.MSKSourceConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration) {
			delta.Add("Spec.MSKSourceConfiguration.AuthenticationConfiguration", a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration)
		} else if a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration != nil && b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity) {
				delta.Add("Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity", a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity)
			} else if a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity != nil && b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity != nil {
				if *a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity != *b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity {
					delta.Add("Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity", a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN) {
				delta.Add("Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN", a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN)
			} else if a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN != nil && b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN != nil {
				if *a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN != *b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN {
					delta.Add("Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN", a.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN, b.ko.Spec.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.MSKClusterARN, b.ko.Spec.MSKSourceConfiguration.MSKClusterARN) {
			delta.Add("Spec.MSKSourceConfiguration.MSKClusterARN", a.ko.Spec.MSKSourceConfiguration.MSKClusterARN, b.ko.Spec.MSKSourceConfiguration.MSKClusterARN)
		} else if a.ko.Spec.MSKSourceConfiguration.MSKClusterARN != nil && b.ko.Spec.MSKSourceConfiguration.MSKClusterARN != nil {
			if *a.ko.Spec.MSKSourceConfiguration.MSKClusterARN != *b.ko.Spec.MSKSourceConfiguration.MSKClusterARN {
				delta.Add("Spec.MSKSourceConfiguration.MSKClusterARN", a.ko.Spec.MSKSourceConfiguration.MSKClusterARN, b.ko.Spec.MSKSourceConfiguration.MSKClusterARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp, b.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp) {
			delta.Add("Spec.MSKSourceConfiguration.ReadFromTimestamp", a.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp, b.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp)
		} else if a.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp != nil && b.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp != nil {
			if !a.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp.Equal(b.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp) {
				delta.Add("Spec.MSKSourceConfiguration.ReadFromTimestamp", a.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp, b.ko.Spec.MSKSourceConfiguration.ReadFromTimestamp)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MSKSourceConfiguration.TopicName, b.ko.Spec.MSKSourceConfiguration.TopicName) {
			delta.Add("Spec.MSKSourceConfiguration.TopicName", a.ko.Spec.MSKSourceConfiguration.TopicName, b.ko.Spec.MSKSourceConfiguration.TopicName)
		} else if a.ko.Spec.MSKSourceConfiguration.TopicName != nil && b.ko.Spec.MSKSourceConfiguration.TopicName != nil {
			if *a.ko.Spec.MSKSourceConfiguration.TopicName != *b.ko.Spec.MSKSourceConfiguration.TopicName {
				delta.Add("Spec.MSKSourceConfiguration.TopicName", a.ko.Spec.MSKSourceConfiguration.TopicName, b.ko.Spec.MSKSourceConfiguration.TopicName)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration, b.ko.Spec.RedshiftDestinationConfiguration) {
		delta.Add("Spec.RedshiftDestinationConfiguration", a.ko.Spec.RedshiftDestinationConfiguration, b.ko.Spec.RedshiftDestinationConfiguration)
	} else if a.ko.Spec.RedshiftDestinationConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL, b.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL) {
			delta.Add("Spec.RedshiftDestinationConfiguration.ClusterJDBCURL", a.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL, b.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL != nil && b.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL != nil {
			if *a.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL != *b.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL {
				delta.Add("Spec.RedshiftDestinationConfiguration.ClusterJDBCURL", a.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL, b.ko.Spec.RedshiftDestinationConfiguration.ClusterJDBCURL)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand) {
			delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand != nil && b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions != nil && b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions != *b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions {
					delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.CopyOptions)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns != nil && b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns != *b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns {
					delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName) {
				delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName != nil && b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName != *b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName {
					delta.Add("Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName", a.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName, b.ko.Spec.RedshiftDestinationConfiguration.CopyCommand.DataTableName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.Password, b.ko.Spec.RedshiftDestinationConfiguration.Password) {
			delta.Add("Spec.RedshiftDestinationConfiguration.Password", a.ko.Spec.RedshiftDestinationConfiguration.Password, b.ko.Spec.RedshiftDestinationConfiguration.Password)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.Password != nil && b.ko.Spec.RedshiftDestinationConfiguration.Password != nil {
			if *a.ko.Spec.RedshiftDestinationConfiguration.Password != *b.ko.Spec.RedshiftDestinationConfiguration.Password {
				delta.Add("Spec.RedshiftDestinationConfiguration.Password", a.ko.Spec.RedshiftDestinationConfiguration.Password, b.ko.Spec.RedshiftDestinationConfiguration.Password)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.RedshiftDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions, b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.RedshiftDestinationConfiguration.RetryOptions", a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions, b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions != nil && b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.RoleARN) {
			delta.Add("Spec.RedshiftDestinationConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.RoleARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.RedshiftDestinationConfiguration.RoleARN != *b.ko.Spec.RedshiftDestinationConfiguration.RoleARN {
				delta.Add("Spec.RedshiftDestinationConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration) {
			delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupMode", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode != *b.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3BackupMode", a.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode, b.ko.Spec.RedshiftDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration) {
			delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration != nil && b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled) {
				delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil && b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled != *b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled {
					delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN != *b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN) {
				delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
			} else if a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil && b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				if *a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN != *b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN {
					delta.Add("Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.RedshiftDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RedshiftDestinationConfiguration.Username, b.ko.Spec.RedshiftDestinationConfiguration.Username) {
			delta.Add("Spec.RedshiftDestinationConfiguration.Username", a.ko.Spec.RedshiftDestinationConfiguration.Username, b.ko.Spec.RedshiftDestinationConfiguration.Username)
		} else if a.ko.Spec.RedshiftDestinationConfiguration.Username != nil && b.ko.Spec.RedshiftDestinationConfiguration.Username != nil {
			if *a.ko.Spec.RedshiftDestinationConfiguration.Username != *b.ko.Spec.RedshiftDestinationConfiguration.Username {
				delta.Add("Spec.RedshiftDestinationConfiguration.Username", a.ko.Spec.RedshiftDestinationConfiguration.Username, b.ko.Spec.RedshiftDestinationConfiguration.Username)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration, b.ko.Spec.S3DestinationConfiguration) {
		delta.Add("Spec.S3DestinationConfiguration", a.ko.Spec.S3DestinationConfiguration, b.ko.Spec.S3DestinationConfiguration)
	} else if a.ko.Spec.S3DestinationConfiguration != nil && b.ko.Spec.S3DestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.BucketARN, b.ko.Spec.S3DestinationConfiguration.BucketARN) {
			delta.Add("Spec.S3DestinationConfiguration.BucketARN", a.ko.Spec.S3DestinationConfiguration.BucketARN, b.ko.Spec.S3DestinationConfiguration.BucketARN)
		} else if a.ko.Spec.S3DestinationConfiguration.BucketARN != nil && b.ko.Spec.S3DestinationConfiguration.BucketARN != nil {
			if *a.ko.Spec.S3DestinationConfiguration.BucketARN != *b.ko.Spec.S3DestinationConfiguration.BucketARN {
				delta.Add("Spec.S3DestinationConfiguration.BucketARN", a.ko.Spec.S3DestinationConfiguration.BucketARN, b.ko.Spec.S3DestinationConfiguration.BucketARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.BufferingHints, b.ko.Spec.S3DestinationConfiguration.BufferingHints) {
			delta.Add("Spec.S3DestinationConfiguration.BufferingHints", a.ko.Spec.S3DestinationConfiguration.BufferingHints, b.ko.Spec.S3DestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.S3DestinationConfiguration.BufferingHints != nil && b.ko.Spec.S3DestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.S3DestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.S3DestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.CompressionFormat, b.ko.Spec.S3DestinationConfiguration.CompressionFormat) {
			delta.Add("Spec.S3DestinationConfiguration.CompressionFormat", a.ko.Spec.S3DestinationConfiguration.CompressionFormat, b.ko.Spec.S3DestinationConfiguration.CompressionFormat)
		} else if a.ko.Spec.S3DestinationConfiguration.CompressionFormat != nil && b.ko.Spec.S3DestinationConfiguration.CompressionFormat != nil {
			if *a.ko.Spec.S3DestinationConfiguration.CompressionFormat != *b.ko.Spec.S3DestinationConfiguration.CompressionFormat {
				delta.Add("Spec.S3DestinationConfiguration.CompressionFormat", a.ko.Spec.S3DestinationConfiguration.CompressionFormat, b.ko.Spec.S3DestinationConfiguration.CompressionFormat)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration) {
			delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration)
		} else if a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration != nil && b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig) {
				delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig)
			} else if a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
					delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
				} else if a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
					if *a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
						delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig) {
				delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
			} else if a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
				if *a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig {
					delta.Add("Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix) {
			delta.Add("Spec.S3DestinationConfiguration.ErrorOutputPrefix", a.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix)
		} else if a.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix != nil && b.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix != nil {
			if *a.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix != *b.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix {
				delta.Add("Spec.S3DestinationConfiguration.ErrorOutputPrefix", a.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix, b.ko.Spec.S3DestinationConfiguration.ErrorOutputPrefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.Prefix, b.ko.Spec.S3DestinationConfiguration.Prefix) {
			delta.Add("Spec.S3DestinationConfiguration.Prefix", a.ko.Spec.S3DestinationConfiguration.Prefix, b.ko.Spec.S3DestinationConfiguration.Prefix)
		} else if a.ko.Spec.S3DestinationConfiguration.Prefix != nil && b.ko.Spec.S3DestinationConfiguration.Prefix != nil {
			if *a.ko.Spec.S3DestinationConfiguration.Prefix != *b.ko.Spec.S3DestinationConfiguration.Prefix {
				delta.Add("Spec.S3DestinationConfiguration.Prefix", a.ko.Spec.S3DestinationConfiguration.Prefix, b.ko.Spec.S3DestinationConfiguration.Prefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3DestinationConfiguration.RoleARN, b.ko.Spec.S3DestinationConfiguration.RoleARN) {
			delta.Add("Spec.S3DestinationConfiguration.RoleARN", a.ko.Spec.S3DestinationConfiguration.RoleARN, b.ko.Spec.S3DestinationConfiguration.RoleARN)
		} else if a.ko.Spec.S3DestinationConfiguration.RoleARN != nil && b.ko.Spec.S3DestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.S3DestinationConfiguration.RoleARN != *b.ko.Spec.S3DestinationConfiguration.RoleARN {
				delta.Add("Spec.S3DestinationConfiguration.RoleARN", a.ko.Spec.S3DestinationConfiguration.RoleARN, b.ko.Spec.S3DestinationConfiguration.RoleARN)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration) {
		delta.Add("Spec.SnowflakeDestinationConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration)
	} else if a.ko.Spec.SnowflakeDestinationConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.AccountURL, b.ko.Spec.SnowflakeDestinationConfiguration.AccountURL) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.AccountURL", a.ko.Spec.SnowflakeDestinationConfiguration.AccountURL, b.ko.Spec.SnowflakeDestinationConfiguration.AccountURL)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.AccountURL != nil && b.ko.Spec.SnowflakeDestinationConfiguration.AccountURL != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.AccountURL != *b.ko.Spec.SnowflakeDestinationConfiguration.AccountURL {
				delta.Add("Spec.SnowflakeDestinationConfiguration.AccountURL", a.ko.Spec.SnowflakeDestinationConfiguration.AccountURL, b.ko.Spec.SnowflakeDestinationConfiguration.AccountURL)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.BufferingHints", a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints != nil && b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.ContentColumnName", a.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName != *b.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName {
				delta.Add("Spec.SnowflakeDestinationConfiguration.ContentColumnName", a.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.ContentColumnName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption, b.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.DataLoadingOption", a.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption, b.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption != nil && b.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption != *b.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption {
				delta.Add("Spec.SnowflakeDestinationConfiguration.DataLoadingOption", a.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption, b.ko.Spec.SnowflakeDestinationConfiguration.DataLoadingOption)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.Database, b.ko.Spec.SnowflakeDestinationConfiguration.Database) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.Database", a.ko.Spec.SnowflakeDestinationConfiguration.Database, b.ko.Spec.SnowflakeDestinationConfiguration.Database)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.Database != nil && b.ko.Spec.SnowflakeDestinationConfiguration.Database != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.Database != *b.ko.Spec.SnowflakeDestinationConfiguration.Database {
				delta.Add("Spec.SnowflakeDestinationConfiguration.Database", a.ko.Spec.SnowflakeDestinationConfiguration.Database, b.ko.Spec.SnowflakeDestinationConfiguration.Database)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase, b.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.KeyPassphrase", a.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase, b.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase != nil && b.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase != *b.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase {
				delta.Add("Spec.SnowflakeDestinationConfiguration.KeyPassphrase", a.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase, b.ko.Spec.SnowflakeDestinationConfiguration.KeyPassphrase)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.MetaDataColumnName", a.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName != *b.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName {
				delta.Add("Spec.SnowflakeDestinationConfiguration.MetaDataColumnName", a.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName, b.ko.Spec.SnowflakeDestinationConfiguration.MetaDataColumnName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey, b.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.PrivateKey", a.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey, b.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey != nil && b.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey != *b.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey {
				delta.Add("Spec.SnowflakeDestinationConfiguration.PrivateKey", a.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey, b.ko.Spec.SnowflakeDestinationConfiguration.PrivateKey)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions, b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.RetryOptions", a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions, b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions != nil && b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.RoleARN) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.RoleARN)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.RoleARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.RoleARN != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.RoleARN != *b.ko.Spec.SnowflakeDestinationConfiguration.RoleARN {
				delta.Add("Spec.SnowflakeDestinationConfiguration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.RoleARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode, b.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.S3BackupMode", a.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode, b.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode != *b.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3BackupMode", a.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode, b.ko.Spec.SnowflakeDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.Schema, b.ko.Spec.SnowflakeDestinationConfiguration.Schema) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.Schema", a.ko.Spec.SnowflakeDestinationConfiguration.Schema, b.ko.Spec.SnowflakeDestinationConfiguration.Schema)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.Schema != nil && b.ko.Spec.SnowflakeDestinationConfiguration.Schema != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.Schema != *b.ko.Spec.SnowflakeDestinationConfiguration.Schema {
				delta.Add("Spec.SnowflakeDestinationConfiguration.Schema", a.ko.Spec.SnowflakeDestinationConfiguration.Schema, b.ko.Spec.SnowflakeDestinationConfiguration.Schema)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled != *b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN != *b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN != *b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SnowflakeDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled != *b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole != *b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID) {
				delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID)
			} else if a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID != nil && b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID != nil {
				if *a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID != *b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID {
					delta.Add("Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID", a.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID, b.ko.Spec.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.Table, b.ko.Spec.SnowflakeDestinationConfiguration.Table) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.Table", a.ko.Spec.SnowflakeDestinationConfiguration.Table, b.ko.Spec.SnowflakeDestinationConfiguration.Table)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.Table != nil && b.ko.Spec.SnowflakeDestinationConfiguration.Table != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.Table != *b.ko.Spec.SnowflakeDestinationConfiguration.Table {
				delta.Add("Spec.SnowflakeDestinationConfiguration.Table", a.ko.Spec.SnowflakeDestinationConfiguration.Table, b.ko.Spec.SnowflakeDestinationConfiguration.Table)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SnowflakeDestinationConfiguration.User, b.ko.Spec.SnowflakeDestinationConfiguration.User) {
			delta.Add("Spec.SnowflakeDestinationConfiguration.User", a.ko.Spec.SnowflakeDestinationConfiguration.User, b.ko.Spec.SnowflakeDestinationConfiguration.User)
		} else if a.ko.Spec.SnowflakeDestinationConfiguration.User != nil && b.ko.Spec.SnowflakeDestinationConfiguration.User != nil {
			if *a.ko.Spec.SnowflakeDestinationConfiguration.User != *b.ko.Spec.SnowflakeDestinationConfiguration.User {
				delta.Add("Spec.SnowflakeDestinationConfiguration.User", a.ko.Spec.SnowflakeDestinationConfiguration.User, b.ko.Spec.SnowflakeDestinationConfiguration.User)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration, b.ko.Spec.SplunkDestinationConfiguration) {
		delta.Add("Spec.SplunkDestinationConfiguration", a.ko.Spec.SplunkDestinationConfiguration, b.ko.Spec.SplunkDestinationConfiguration)
	} else if a.ko.Spec.SplunkDestinationConfiguration != nil && b.ko.Spec.SplunkDestinationConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.BufferingHints, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints) {
			delta.Add("Spec.SplunkDestinationConfiguration.BufferingHints", a.ko.Spec.SplunkDestinationConfiguration.BufferingHints, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints)
		} else if a.ko.Spec.SplunkDestinationConfiguration.BufferingHints != nil && b.ko.Spec.SplunkDestinationConfiguration.BufferingHints != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds) {
				delta.Add("Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds)
			} else if a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds != *b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds {
					delta.Add("Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds", a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs) {
				delta.Add("Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs)
			} else if a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs != nil && b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs != *b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs {
					delta.Add("Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs", a.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.BufferingHints.SizeInMBs)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions) {
			delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions)
		} else if a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions != nil && b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled) {
				delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			} else if a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled {
					delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName) {
				delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			} else if a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName {
					delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName) {
				delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			} else if a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName {
					delta.Add("Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds, b.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds) {
			delta.Add("Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds", a.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds, b.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds)
		} else if a.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds != nil && b.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds != nil {
			if *a.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds != *b.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds {
				delta.Add("Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds", a.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds, b.ko.Spec.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.HECEndpoint, b.ko.Spec.SplunkDestinationConfiguration.HECEndpoint) {
			delta.Add("Spec.SplunkDestinationConfiguration.HECEndpoint", a.ko.Spec.SplunkDestinationConfiguration.HECEndpoint, b.ko.Spec.SplunkDestinationConfiguration.HECEndpoint)
		} else if a.ko.Spec.SplunkDestinationConfiguration.HECEndpoint != nil && b.ko.Spec.SplunkDestinationConfiguration.HECEndpoint != nil {
			if *a.ko.Spec.SplunkDestinationConfiguration.HECEndpoint != *b.ko.Spec.SplunkDestinationConfiguration.HECEndpoint {
				delta.Add("Spec.SplunkDestinationConfiguration.HECEndpoint", a.ko.Spec.SplunkDestinationConfiguration.HECEndpoint, b.ko.Spec.SplunkDestinationConfiguration.HECEndpoint)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.HECEndpointType, b.ko.Spec.SplunkDestinationConfiguration.HECEndpointType) {
			delta.Add("Spec.SplunkDestinationConfiguration.HECEndpointType", a.ko.Spec.SplunkDestinationConfiguration.HECEndpointType, b.ko.Spec.SplunkDestinationConfiguration.HECEndpointType)
		} else if a.ko.Spec.SplunkDestinationConfiguration.HECEndpointType != nil && b.ko.Spec.SplunkDestinationConfiguration.HECEndpointType != nil {
			if *a.ko.Spec.SplunkDestinationConfiguration.HECEndpointType != *b.ko.Spec.SplunkDestinationConfiguration.HECEndpointType {
				delta.Add("Spec.SplunkDestinationConfiguration.HECEndpointType", a.ko.Spec.SplunkDestinationConfiguration.HECEndpointType, b.ko.Spec.SplunkDestinationConfiguration.HECEndpointType)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.HECToken, b.ko.Spec.SplunkDestinationConfiguration.HECToken) {
			delta.Add("Spec.SplunkDestinationConfiguration.HECToken", a.ko.Spec.SplunkDestinationConfiguration.HECToken, b.ko.Spec.SplunkDestinationConfiguration.HECToken)
		} else if a.ko.Spec.SplunkDestinationConfiguration.HECToken != nil && b.ko.Spec.SplunkDestinationConfiguration.HECToken != nil {
			if *a.ko.Spec.SplunkDestinationConfiguration.HECToken != *b.ko.Spec.SplunkDestinationConfiguration.HECToken {
				delta.Add("Spec.SplunkDestinationConfiguration.HECToken", a.ko.Spec.SplunkDestinationConfiguration.HECToken, b.ko.Spec.SplunkDestinationConfiguration.HECToken)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration) {
			delta.Add("Spec.SplunkDestinationConfiguration.ProcessingConfiguration", a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration)
		} else if a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration != nil && b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled) {
				delta.Add("Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled)
			} else if a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled != nil && b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled != *b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled {
					delta.Add("Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled", a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled)
				}
			}
			if len(a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors) != len(b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors) {
				delta.Add("Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors)
			} else if len(a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors) {
					delta.Add("Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors", a.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors, b.ko.Spec.SplunkDestinationConfiguration.ProcessingConfiguration.Processors)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.RetryOptions, b.ko.Spec.SplunkDestinationConfiguration.RetryOptions) {
			delta.Add("Spec.SplunkDestinationConfiguration.RetryOptions", a.ko.Spec.SplunkDestinationConfiguration.RetryOptions, b.ko.Spec.SplunkDestinationConfiguration.RetryOptions)
		} else if a.ko.Spec.SplunkDestinationConfiguration.RetryOptions != nil && b.ko.Spec.SplunkDestinationConfiguration.RetryOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds) {
				delta.Add("Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds)
			} else if a.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds != nil && b.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds != *b.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds {
					delta.Add("Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds", a.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds, b.ko.Spec.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3BackupMode, b.ko.Spec.SplunkDestinationConfiguration.S3BackupMode) {
			delta.Add("Spec.SplunkDestinationConfiguration.S3BackupMode", a.ko.Spec.SplunkDestinationConfiguration.S3BackupMode, b.ko.Spec.SplunkDestinationConfiguration.S3BackupMode)
		} else if a.ko.Spec.SplunkDestinationConfiguration.S3BackupMode != nil && b.ko.Spec.SplunkDestinationConfiguration.S3BackupMode != nil {
			if *a.ko.Spec.SplunkDestinationConfiguration.S3BackupMode != *b.ko.Spec.SplunkDestinationConfiguration.S3BackupMode {
				delta.Add("Spec.SplunkDestinationConfiguration.S3BackupMode", a.ko.Spec.SplunkDestinationConfiguration.S3BackupMode, b.ko.Spec.SplunkDestinationConfiguration.S3BackupMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration) {
			delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration)
		} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BucketARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.CompressionFormat)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN) {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN {
							delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig) {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig {
						delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.Prefix", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.Prefix)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN) {
				delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN)
			} else if a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN != nil && b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN != *b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN {
					delta.Add("Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN", a.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.S3Configuration.RoleARN)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration) {
			delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration)
		} else if a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration != nil && b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled) {
				delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled)
			} else if a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil && b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled != *b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled {
					delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.Enabled)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN) {
				delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
			} else if a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil && b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN != *b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN {
					delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.RoleARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN) {
				delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
			} else if a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil && b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				if *a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN != *b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN {
					delta.Add("Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN", a.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN, b.ko.Spec.SplunkDestinationConfiguration.SecretsManagerConfiguration.SecretARN)
				}
			}
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
