// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package delivery_stream

import (
	"context"
	"fmt"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"

	iamapitypes "github.com/aws-controllers-k8s/iam-controller/apis/v1alpha1"
	kmsapitypes "github.com/aws-controllers-k8s/kms-controller/apis/v1alpha1"
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	acktypes "github.com/aws-controllers-k8s/runtime/pkg/types"
	s3apitypes "github.com/aws-controllers-k8s/s3-controller/apis/v1alpha1"
	secretsmanagerapitypes "github.com/aws-controllers-k8s/secretsmanager-controller/apis/v1alpha1"

	svcapitypes "github.com/aws-controllers-k8s/firehose-controller/apis/v1alpha1"
)

// +kubebuilder:rbac:groups=kms.services.k8s.aws,resources=keys,verbs=get;list
// +kubebuilder:rbac:groups=kms.services.k8s.aws,resources=keys/status,verbs=get;list

// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles,verbs=get;list
// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles/status,verbs=get;list

// +kubebuilder:rbac:groups=s3.services.k8s.aws,resources=buckets,verbs=get;list
// +kubebuilder:rbac:groups=s3.services.k8s.aws,resources=buckets/status,verbs=get;list

// +kubebuilder:rbac:groups=kms.services.k8s.aws,resources=keys,verbs=get;list
// +kubebuilder:rbac:groups=kms.services.k8s.aws,resources=keys/status,verbs=get;list

// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles,verbs=get;list
// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles/status,verbs=get;list

// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles,verbs=get;list
// +kubebuilder:rbac:groups=iam.services.k8s.aws,resources=roles/status,verbs=get;list

// +kubebuilder:rbac:groups=secretsmanager.services.k8s.aws,resources=secrets,verbs=get;list
// +kubebuilder:rbac:groups=secretsmanager.services.k8s.aws,resources=secrets/status,verbs=get;list

// ClearResolvedReferences removes any reference values that were made
// concrete in the spec. It returns a copy of the input AWSResource which
// contains the original *Ref values, but none of their respective concrete
// values.
func (rm *resourceManager) ClearResolvedReferences(res acktypes.AWSResource) acktypes.AWSResource {
	ko := rm.concreteResource(res).ko.DeepCopy()

	if ko.Spec.DeliveryStreamEncryptionConfiguration != nil {
		if ko.Spec.DeliveryStreamEncryptionConfiguration.KeyRef != nil {
			ko.Spec.DeliveryStreamEncryptionConfiguration.KeyARN = nil
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.RoleRef != nil {
			ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN = nil
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef != nil {
				ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN = nil
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef != nil {
						ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN = nil
					}
				}
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef != nil {
				ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN = nil
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef != nil {
				ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN = nil
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef != nil {
				ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN = nil
			}
		}
	}

	return &resource{ko}
}

// ResolveReferences finds if there are any Reference field(s) present
// inside AWSResource passed in the parameter and attempts to resolve those
// reference field(s) into their respective target field(s). It returns a
// copy of the input AWSResource with resolved reference(s), a boolean which
// is set to true if the resource contains any references (regardless of if
// they are resolved successfully) and an error if the passed AWSResource's
// reference field(s) could not be resolved.
func (rm *resourceManager) ResolveReferences(
	ctx context.Context,
	apiReader client.Reader,
	res acktypes.AWSResource,
) (acktypes.AWSResource, bool, error) {
	ko := rm.concreteResource(res).ko

	resourceHasReferences := false
	err := validateReferenceFields(ko)
	if fieldHasReferences, err := rm.resolveReferenceForDeliveryStreamEncryptionConfiguration_KeyARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_RoleARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_BucketARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_EncryptionConfiguration_KMSEncryptionConfig_AWSKMSKeyARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_RoleARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_RoleARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_SecretARN(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	return &resource{ko}, resourceHasReferences, err
}

// validateReferenceFields validates the reference field and corresponding
// identifier field.
func validateReferenceFields(ko *svcapitypes.DeliveryStream) error {

	if ko.Spec.DeliveryStreamEncryptionConfiguration != nil {
		if ko.Spec.DeliveryStreamEncryptionConfiguration.KeyRef != nil && ko.Spec.DeliveryStreamEncryptionConfiguration.KeyARN != nil {
			return ackerr.ResourceReferenceAndIDNotSupportedFor("DeliveryStreamEncryptionConfiguration.KeyARN", "DeliveryStreamEncryptionConfiguration.KeyRef")
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != nil {
			return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.RoleARN", "HTTPEndpointDestinationConfiguration.RoleRef")
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil {
				return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN", "HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef")
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN", "HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef")
					}
				}
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil {
				return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN", "HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef")
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN", "HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef")
			}
		}
	}

	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				return ackerr.ResourceReferenceAndIDNotSupportedFor("HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN", "HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef")
			}
		}
	}
	return nil
}

// resolveReferenceForDeliveryStreamEncryptionConfiguration_KeyARN reads the resource referenced
// from DeliveryStreamEncryptionConfiguration.KeyRef field and sets the DeliveryStreamEncryptionConfiguration.KeyARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForDeliveryStreamEncryptionConfiguration_KeyARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.DeliveryStreamEncryptionConfiguration != nil {
		if ko.Spec.DeliveryStreamEncryptionConfiguration.KeyRef != nil && ko.Spec.DeliveryStreamEncryptionConfiguration.KeyRef.From != nil {
			hasReferences = true
			arr := ko.Spec.DeliveryStreamEncryptionConfiguration.KeyRef.From
			if arr.Name == nil || *arr.Name == "" {
				return hasReferences, fmt.Errorf("provided resource reference is nil or empty: DeliveryStreamEncryptionConfiguration.KeyRef")
			}
			namespace := ko.ObjectMeta.GetNamespace()
			if arr.Namespace != nil && *arr.Namespace != "" {
				namespace = *arr.Namespace
			}
			obj := &kmsapitypes.Key{}
			if err := getReferencedResourceState_Key(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
				return hasReferences, err
			}
			ko.Spec.DeliveryStreamEncryptionConfiguration.KeyARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
		}
	}

	return hasReferences, nil
}

// getReferencedResourceState_Key looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Key(
	ctx context.Context,
	apiReader client.Reader,
	obj *kmsapitypes.Key,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeTerminal &&
			cond.Status == corev1.ConditionTrue {
			return ackerr.ResourceReferenceTerminalFor(
				"Key",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Key",
			namespace, name)
	}
	var refResourceSynced bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeResourceSynced &&
			cond.Status == corev1.ConditionTrue {
			refResourceSynced = true
		}
	}
	if !refResourceSynced {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Key",
			namespace, name)
	}
	if obj.Status.ACKResourceMetadata == nil || obj.Status.ACKResourceMetadata.ARN == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Key",
			namespace, name,
			"Status.ACKResourceMetadata.ARN")
	}
	return nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_RoleARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.RoleRef field and sets the HTTPEndpointDestinationConfiguration.RoleARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_RoleARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.RoleRef.From != nil {
			hasReferences = true
			arr := ko.Spec.HTTPEndpointDestinationConfiguration.RoleRef.From
			if arr.Name == nil || *arr.Name == "" {
				return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.RoleRef")
			}
			namespace := ko.ObjectMeta.GetNamespace()
			if arr.Namespace != nil && *arr.Namespace != "" {
				namespace = *arr.Namespace
			}
			obj := &iamapitypes.Role{}
			if err := getReferencedResourceState_Role(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
				return hasReferences, err
			}
			ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
		}
	}

	return hasReferences, nil
}

// getReferencedResourceState_Role looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Role(
	ctx context.Context,
	apiReader client.Reader,
	obj *iamapitypes.Role,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeTerminal &&
			cond.Status == corev1.ConditionTrue {
			return ackerr.ResourceReferenceTerminalFor(
				"Role",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Role",
			namespace, name)
	}
	var refResourceSynced bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeResourceSynced &&
			cond.Status == corev1.ConditionTrue {
			refResourceSynced = true
		}
	}
	if !refResourceSynced {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Role",
			namespace, name)
	}
	if obj.Status.ACKResourceMetadata == nil || obj.Status.ACKResourceMetadata.ARN == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Role",
			namespace, name,
			"Status.ACKResourceMetadata.ARN")
	}
	return nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_BucketARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef field and sets the HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_BucketARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef.From != nil {
				hasReferences = true
				arr := ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef.From
				if arr.Name == nil || *arr.Name == "" {
					return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.S3Configuration.BucketRef")
				}
				namespace := ko.ObjectMeta.GetNamespace()
				if arr.Namespace != nil && *arr.Namespace != "" {
					namespace = *arr.Namespace
				}
				obj := &s3apitypes.Bucket{}
				if err := getReferencedResourceState_Bucket(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
					return hasReferences, err
				}
				ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
			}
		}
	}

	return hasReferences, nil
}

// getReferencedResourceState_Bucket looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Bucket(
	ctx context.Context,
	apiReader client.Reader,
	obj *s3apitypes.Bucket,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeTerminal &&
			cond.Status == corev1.ConditionTrue {
			return ackerr.ResourceReferenceTerminalFor(
				"Bucket",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Bucket",
			namespace, name)
	}
	var refResourceSynced bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeResourceSynced &&
			cond.Status == corev1.ConditionTrue {
			refResourceSynced = true
		}
	}
	if !refResourceSynced {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Bucket",
			namespace, name)
	}
	if obj.Status.ACKResourceMetadata == nil || obj.Status.ACKResourceMetadata.ARN == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Bucket",
			namespace, name,
			"Status.ACKResourceMetadata.ARN")
	}
	return nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_EncryptionConfiguration_KMSEncryptionConfig_AWSKMSKeyARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef field and sets the HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_EncryptionConfiguration_KMSEncryptionConfig_AWSKMSKeyARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef.From != nil {
						hasReferences = true
						arr := ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef.From
						if arr.Name == nil || *arr.Name == "" {
							return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyRef")
						}
						namespace := ko.ObjectMeta.GetNamespace()
						if arr.Namespace != nil && *arr.Namespace != "" {
							namespace = *arr.Namespace
						}
						obj := &kmsapitypes.Key{}
						if err := getReferencedResourceState_Key(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
							return hasReferences, err
						}
						ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
					}
				}
			}
		}
	}

	return hasReferences, nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_RoleARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef field and sets the HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_S3Configuration_RoleARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef.From != nil {
				hasReferences = true
				arr := ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef.From
				if arr.Name == nil || *arr.Name == "" {
					return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.S3Configuration.RoleRef")
				}
				namespace := ko.ObjectMeta.GetNamespace()
				if arr.Namespace != nil && *arr.Namespace != "" {
					namespace = *arr.Namespace
				}
				obj := &iamapitypes.Role{}
				if err := getReferencedResourceState_Role(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
					return hasReferences, err
				}
				ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
			}
		}
	}

	return hasReferences, nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_RoleARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef field and sets the HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_RoleARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef.From != nil {
				hasReferences = true
				arr := ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef.From
				if arr.Name == nil || *arr.Name == "" {
					return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleRef")
				}
				namespace := ko.ObjectMeta.GetNamespace()
				if arr.Namespace != nil && *arr.Namespace != "" {
					namespace = *arr.Namespace
				}
				obj := &iamapitypes.Role{}
				if err := getReferencedResourceState_Role(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
					return hasReferences, err
				}
				ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
			}
		}
	}

	return hasReferences, nil
}

// resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_SecretARN reads the resource referenced
// from HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef field and sets the HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForHTTPEndpointDestinationConfiguration_SecretsManagerConfiguration_SecretARN(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.DeliveryStream,
) (hasReferences bool, err error) {
	if ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			if ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef != nil && ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef.From != nil {
				hasReferences = true
				arr := ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef.From
				if arr.Name == nil || *arr.Name == "" {
					return hasReferences, fmt.Errorf("provided resource reference is nil or empty: HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretRef")
				}
				namespace := ko.ObjectMeta.GetNamespace()
				if arr.Namespace != nil && *arr.Namespace != "" {
					namespace = *arr.Namespace
				}
				obj := &secretsmanagerapitypes.Secret{}
				if err := getReferencedResourceState_Secret(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
					return hasReferences, err
				}
				ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN = (*string)(obj.Status.ACKResourceMetadata.ARN)
			}
		}
	}

	return hasReferences, nil
}

// getReferencedResourceState_Secret looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Secret(
	ctx context.Context,
	apiReader client.Reader,
	obj *secretsmanagerapitypes.Secret,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeTerminal &&
			cond.Status == corev1.ConditionTrue {
			return ackerr.ResourceReferenceTerminalFor(
				"Secret",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Secret",
			namespace, name)
	}
	var refResourceSynced bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeResourceSynced &&
			cond.Status == corev1.ConditionTrue {
			refResourceSynced = true
		}
	}
	if !refResourceSynced {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Secret",
			namespace, name)
	}
	if obj.Status.ACKResourceMetadata == nil || obj.Status.ACKResourceMetadata.ARN == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Secret",
			namespace, name,
			"Status.ACKResourceMetadata.ARN")
	}
	return nil
}
