// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package delivery_stream

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/firehose"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/firehose/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/firehose-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.DeliveryStream{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDeliveryStreamOutput
	resp, err = rm.sdkapi.DescribeDeliveryStream(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDeliveryStream", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.DeliveryStreamDescription.CreateTimestamp != nil {
		ko.Status.CreateTimestamp = &metav1.Time{*resp.DeliveryStreamDescription.CreateTimestamp}
	} else {
		ko.Status.CreateTimestamp = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DeliveryStreamDescription.DeliveryStreamARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DeliveryStreamDescription.DeliveryStreamARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration != nil {
		f2 := &svcapitypes.DeliveryStreamEncryptionConfigurationInput{}
		if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.KeyARN != nil {
			f2.KeyARN = resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.KeyARN
		}
		if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.KeyType != "" {
			f2.KeyType = aws.String(string(resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.KeyType))
		}
		ko.Spec.DeliveryStreamEncryptionConfiguration = f2
	} else {
		ko.Spec.DeliveryStreamEncryptionConfiguration = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamName != nil {
		ko.Spec.DeliveryStreamName = resp.DeliveryStreamDescription.DeliveryStreamName
	} else {
		ko.Spec.DeliveryStreamName = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamStatus != "" {
		ko.Status.DeliveryStreamStatus = aws.String(string(resp.DeliveryStreamDescription.DeliveryStreamStatus))
	} else {
		ko.Status.DeliveryStreamStatus = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamType != "" {
		ko.Spec.DeliveryStreamType = aws.String(string(resp.DeliveryStreamDescription.DeliveryStreamType))
	} else {
		ko.Spec.DeliveryStreamType = nil
	}
	if resp.DeliveryStreamDescription.LastUpdateTimestamp != nil {
		ko.Status.LastUpdateTimestamp = &metav1.Time{*resp.DeliveryStreamDescription.LastUpdateTimestamp}
	} else {
		ko.Status.LastUpdateTimestamp = nil
	}
	if resp.DeliveryStreamDescription.VersionId != nil {
		ko.Status.VersionID = resp.DeliveryStreamDescription.VersionId
	} else {
		ko.Status.VersionID = nil
	}

	rm.setStatusDefaults(ko)

	if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.Status != "" {
		ko.Status.DeliveryStreamEncryptionConfigurationStatus = aws.String(string(resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.Status))
	}

	if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.FailureDescription != nil {
		ko.Status.DeliveryStreamEncryptionConfigurationFailureDescription = &svcapitypes.FailureDescription{}
		if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.FailureDescription.Type != "" {
			ko.Status.DeliveryStreamEncryptionConfigurationFailureDescription.Type = aws.String(string(resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.FailureDescription.Type))
		}
		if resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.FailureDescription.Details != nil {
			ko.Status.DeliveryStreamEncryptionConfigurationFailureDescription.Details = resp.DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.FailureDescription.Details
		}
	}

	// From the DeliveryStream API docs there is only ever one Destination per Delivery Stream.
	if len(resp.DeliveryStreamDescription.Destinations) > 0 {
		ko.Status.DestinationID = resp.DeliveryStreamDescription.Destinations[0].DestinationId
	}

	setDestinations(ko, resp)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DeliveryStreamName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDeliveryStreamInput, error) {
	res := &svcsdk.DescribeDeliveryStreamInput{}

	if r.ko.Spec.DeliveryStreamName != nil {
		res.DeliveryStreamName = r.ko.Spec.DeliveryStreamName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDeliveryStreamOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDeliveryStream(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDeliveryStream", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DeliveryStreamARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DeliveryStreamARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDeliveryStreamInput, error) {
	res := &svcsdk.CreateDeliveryStreamInput{}

	if r.ko.Spec.DeliveryStreamEncryptionConfiguration != nil {
		f0 := &svcsdktypes.DeliveryStreamEncryptionConfigurationInput{}
		if r.ko.Spec.DeliveryStreamEncryptionConfiguration.KeyARN != nil {
			f0.KeyARN = r.ko.Spec.DeliveryStreamEncryptionConfiguration.KeyARN
		}
		if r.ko.Spec.DeliveryStreamEncryptionConfiguration.KeyType != nil {
			f0.KeyType = svcsdktypes.KeyType(*r.ko.Spec.DeliveryStreamEncryptionConfiguration.KeyType)
		}
		res.DeliveryStreamEncryptionConfigurationInput = f0
	}
	if r.ko.Spec.DeliveryStreamName != nil {
		res.DeliveryStreamName = r.ko.Spec.DeliveryStreamName
	}
	if r.ko.Spec.DeliveryStreamType != nil {
		res.DeliveryStreamType = svcsdktypes.DeliveryStreamType(*r.ko.Spec.DeliveryStreamType)
	}
	if r.ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		f3 := &svcsdktypes.HttpEndpointDestinationConfiguration{}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints != nil {
			f3f0 := &svcsdktypes.HttpEndpointBufferingHints{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				intervalInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds
				if intervalInSecondsCopy0 > math.MaxInt32 || intervalInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field IntervalInSeconds is of type int32")
				}
				intervalInSecondsCopy := int32(intervalInSecondsCopy0)
				f3f0.IntervalInSeconds = &intervalInSecondsCopy
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				sizeInMBsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs
				if sizeInMBsCopy0 > math.MaxInt32 || sizeInMBsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field SizeInMBs is of type int32")
				}
				sizeInMBsCopy := int32(sizeInMBsCopy0)
				f3f0.SizeInMBs = &sizeInMBsCopy
			}
			f3.BufferingHints = f3f0
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f3f1 := &svcsdktypes.CloudWatchLoggingOptions{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f3f1.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f3f1.LogGroupName = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f3f1.LogStreamName = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName
			}
			f3.CloudWatchLoggingOptions = f3f1
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration != nil {
			f3f2 := &svcsdktypes.HttpEndpointConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != nil {
				f3f2.AccessKey = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != nil {
				f3f2.Name = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != nil {
				f3f2.Url = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL
			}
			f3.EndpointConfiguration = f3f2
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration != nil {
			f3f3 := &svcsdktypes.ProcessingConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f3f3.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f3f3f1 := []svcsdktypes.Processor{}
				for _, f3f3f1iter := range r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors {
					f3f3f1elem := &svcsdktypes.Processor{}
					if f3f3f1iter.Parameters != nil {
						f3f3f1elemf0 := []svcsdktypes.ProcessorParameter{}
						for _, f3f3f1elemf0iter := range f3f3f1iter.Parameters {
							f3f3f1elemf0elem := &svcsdktypes.ProcessorParameter{}
							if f3f3f1elemf0iter.ParameterName != nil {
								f3f3f1elemf0elem.ParameterName = svcsdktypes.ProcessorParameterName(*f3f3f1elemf0iter.ParameterName)
							}
							if f3f3f1elemf0iter.ParameterValue != nil {
								f3f3f1elemf0elem.ParameterValue = f3f3f1elemf0iter.ParameterValue
							}
							f3f3f1elemf0 = append(f3f3f1elemf0, *f3f3f1elemf0elem)
						}
						f3f3f1elem.Parameters = f3f3f1elemf0
					}
					if f3f3f1iter.Type != nil {
						f3f3f1elem.Type = svcsdktypes.ProcessorType(*f3f3f1iter.Type)
					}
					f3f3f1 = append(f3f3f1, *f3f3f1elem)
				}
				f3f3.Processors = f3f3f1
			}
			f3.ProcessingConfiguration = f3f3
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration != nil {
			f3f4 := &svcsdktypes.HttpEndpointRequestConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes != nil {
				f3f4f0 := []svcsdktypes.HttpEndpointCommonAttribute{}
				for _, f3f4f0iter := range r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes {
					f3f4f0elem := &svcsdktypes.HttpEndpointCommonAttribute{}
					if f3f4f0iter.AttributeName != nil {
						f3f4f0elem.AttributeName = f3f4f0iter.AttributeName
					}
					if f3f4f0iter.AttributeValue != nil {
						f3f4f0elem.AttributeValue = f3f4f0iter.AttributeValue
					}
					f3f4f0 = append(f3f4f0, *f3f4f0elem)
				}
				f3f4.CommonAttributes = f3f4f0
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != nil {
				f3f4.ContentEncoding = svcsdktypes.ContentEncoding(*r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding)
			}
			f3.RequestConfiguration = f3f4
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions != nil {
			f3f5 := &svcsdktypes.HttpEndpointRetryOptions{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				durationInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds
				if durationInSecondsCopy0 > math.MaxInt32 || durationInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field DurationInSeconds is of type int32")
				}
				durationInSecondsCopy := int32(durationInSecondsCopy0)
				f3f5.DurationInSeconds = &durationInSecondsCopy
			}
			f3.RetryOptions = f3f5
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != nil {
			f3.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode != nil {
			f3.S3BackupMode = svcsdktypes.HttpEndpointS3BackupMode(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode)
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			f3f8 := &svcsdktypes.S3DestinationConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil {
				f3f8.BucketARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f3f8f1 := &svcsdktypes.BufferingHints{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					intervalInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds
					if intervalInSecondsCopy0 > math.MaxInt32 || intervalInSecondsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field IntervalInSeconds is of type int32")
					}
					intervalInSecondsCopy := int32(intervalInSecondsCopy0)
					f3f8f1.IntervalInSeconds = &intervalInSecondsCopy
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					sizeInMBsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs
					if sizeInMBsCopy0 > math.MaxInt32 || sizeInMBsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field SizeInMBs is of type int32")
					}
					sizeInMBsCopy := int32(sizeInMBsCopy0)
					f3f8f1.SizeInMBs = &sizeInMBsCopy
				}
				f3f8.BufferingHints = f3f8f1
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f3f8f2 := &svcsdktypes.CloudWatchLoggingOptions{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f3f8f2.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f3f8f2.LogGroupName = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f3f8f2.LogStreamName = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName
				}
				f3f8.CloudWatchLoggingOptions = f3f8f2
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f3f8.CompressionFormat = svcsdktypes.CompressionFormat(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f3f8f4 := &svcsdktypes.EncryptionConfiguration{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f3f8f4f0 := &svcsdktypes.KMSEncryptionConfig{}
					if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f3f8f4f0.AWSKMSKeyARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN
					}
					f3f8f4.KMSEncryptionConfig = f3f8f4f0
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f3f8f4.NoEncryptionConfig = svcsdktypes.NoEncryptionConfig(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f3f8.EncryptionConfiguration = f3f8f4
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f3f8.ErrorOutputPrefix = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != nil {
				f3f8.Prefix = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil {
				f3f8.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN
			}
			f3.S3Configuration = f3f8
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			f3f9 := &svcsdktypes.SecretsManagerConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				f3f9.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				f3f9.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				f3f9.SecretARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN
			}
			f3.SecretsManagerConfiguration = f3f9
		}
		res.HttpEndpointDestinationConfiguration = f3
	}
	if r.ko.Spec.Tags != nil {
		f4 := []svcsdktypes.Tag{}
		for _, f4iter := range r.ko.Spec.Tags {
			f4elem := &svcsdktypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, *f4elem)
		}
		res.Tags = f4
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	err = requeueNeededForDeliveryStreamEncryptionModifying(latest)
	if err != nil {
		return nil, err
	}

	if delta.DifferentAt("Spec.DeliveryStreamEncryptionConfiguration") {
		err = updateDeliveryStreamEncryptionConfiguration(ctx, desired, rm.sdkapi, rm.metrics)
		if err != nil {
			return nil, err
		}
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// Set CurrentDeliveryStreamVersionId from latest to ensure most
	// recent version ID is used in the update request.
	if latest.ko.Status.VersionID != nil {
		input.CurrentDeliveryStreamVersionId = latest.ko.Status.VersionID
	}

	// DestinationID a
	if latest.ko.Status.DestinationID != nil {
		input.DestinationId = latest.ko.Status.DestinationID
	}

	var resp *svcsdk.UpdateDestinationOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDestination(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDestination", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateDestinationInput, error) {
	res := &svcsdk.UpdateDestinationInput{}

	if r.ko.Spec.DeliveryStreamName != nil {
		res.DeliveryStreamName = r.ko.Spec.DeliveryStreamName
	}
	if r.ko.Status.DestinationID != nil {
		res.DestinationId = r.ko.Status.DestinationID
	}
	if r.ko.Spec.HTTPEndpointDestinationConfiguration != nil {
		f7 := &svcsdktypes.HttpEndpointDestinationUpdate{}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints != nil {
			f7f0 := &svcsdktypes.HttpEndpointBufferingHints{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				intervalInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds
				if intervalInSecondsCopy0 > math.MaxInt32 || intervalInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field IntervalInSeconds is of type int32")
				}
				intervalInSecondsCopy := int32(intervalInSecondsCopy0)
				f7f0.IntervalInSeconds = &intervalInSecondsCopy
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				sizeInMBsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs
				if sizeInMBsCopy0 > math.MaxInt32 || sizeInMBsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field SizeInMBs is of type int32")
				}
				sizeInMBsCopy := int32(sizeInMBsCopy0)
				f7f0.SizeInMBs = &sizeInMBsCopy
			}
			f7.BufferingHints = f7f0
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f7f1 := &svcsdktypes.CloudWatchLoggingOptions{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f7f1.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f7f1.LogGroupName = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f7f1.LogStreamName = r.ko.Spec.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName
			}
			f7.CloudWatchLoggingOptions = f7f1
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration != nil {
			f7f2 := &svcsdktypes.HttpEndpointConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != nil {
				f7f2.AccessKey = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != nil {
				f7f2.Name = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != nil {
				f7f2.Url = r.ko.Spec.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL
			}
			f7.EndpointConfiguration = f7f2
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration != nil {
			f7f3 := &svcsdktypes.ProcessingConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f7f3.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f7f3f1 := []svcsdktypes.Processor{}
				for _, f7f3f1iter := range r.ko.Spec.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors {
					f7f3f1elem := &svcsdktypes.Processor{}
					if f7f3f1iter.Parameters != nil {
						f7f3f1elemf0 := []svcsdktypes.ProcessorParameter{}
						for _, f7f3f1elemf0iter := range f7f3f1iter.Parameters {
							f7f3f1elemf0elem := &svcsdktypes.ProcessorParameter{}
							if f7f3f1elemf0iter.ParameterName != nil {
								f7f3f1elemf0elem.ParameterName = svcsdktypes.ProcessorParameterName(*f7f3f1elemf0iter.ParameterName)
							}
							if f7f3f1elemf0iter.ParameterValue != nil {
								f7f3f1elemf0elem.ParameterValue = f7f3f1elemf0iter.ParameterValue
							}
							f7f3f1elemf0 = append(f7f3f1elemf0, *f7f3f1elemf0elem)
						}
						f7f3f1elem.Parameters = f7f3f1elemf0
					}
					if f7f3f1iter.Type != nil {
						f7f3f1elem.Type = svcsdktypes.ProcessorType(*f7f3f1iter.Type)
					}
					f7f3f1 = append(f7f3f1, *f7f3f1elem)
				}
				f7f3.Processors = f7f3f1
			}
			f7.ProcessingConfiguration = f7f3
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration != nil {
			f7f4 := &svcsdktypes.HttpEndpointRequestConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes != nil {
				f7f4f0 := []svcsdktypes.HttpEndpointCommonAttribute{}
				for _, f7f4f0iter := range r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes {
					f7f4f0elem := &svcsdktypes.HttpEndpointCommonAttribute{}
					if f7f4f0iter.AttributeName != nil {
						f7f4f0elem.AttributeName = f7f4f0iter.AttributeName
					}
					if f7f4f0iter.AttributeValue != nil {
						f7f4f0elem.AttributeValue = f7f4f0iter.AttributeValue
					}
					f7f4f0 = append(f7f4f0, *f7f4f0elem)
				}
				f7f4.CommonAttributes = f7f4f0
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != nil {
				f7f4.ContentEncoding = svcsdktypes.ContentEncoding(*r.ko.Spec.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding)
			}
			f7.RequestConfiguration = f7f4
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions != nil {
			f7f5 := &svcsdktypes.HttpEndpointRetryOptions{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				durationInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds
				if durationInSecondsCopy0 > math.MaxInt32 || durationInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field DurationInSeconds is of type int32")
				}
				durationInSecondsCopy := int32(durationInSecondsCopy0)
				f7f5.DurationInSeconds = &durationInSecondsCopy
			}
			f7.RetryOptions = f7f5
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN != nil {
			f7.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.RoleARN
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode != nil {
			f7.S3BackupMode = svcsdktypes.HttpEndpointS3BackupMode(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3BackupMode)
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			f7f8 := &svcsdktypes.S3DestinationUpdate{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil {
				f7f8.BucketARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f7f8f1 := &svcsdktypes.BufferingHints{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					intervalInSecondsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds
					if intervalInSecondsCopy0 > math.MaxInt32 || intervalInSecondsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field IntervalInSeconds is of type int32")
					}
					intervalInSecondsCopy := int32(intervalInSecondsCopy0)
					f7f8f1.IntervalInSeconds = &intervalInSecondsCopy
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					sizeInMBsCopy0 := *r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs
					if sizeInMBsCopy0 > math.MaxInt32 || sizeInMBsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field SizeInMBs is of type int32")
					}
					sizeInMBsCopy := int32(sizeInMBsCopy0)
					f7f8f1.SizeInMBs = &sizeInMBsCopy
				}
				f7f8.BufferingHints = f7f8f1
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f7f8f2 := &svcsdktypes.CloudWatchLoggingOptions{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f7f8f2.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f7f8f2.LogGroupName = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f7f8f2.LogStreamName = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName
				}
				f7f8.CloudWatchLoggingOptions = f7f8f2
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f7f8.CompressionFormat = svcsdktypes.CompressionFormat(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f7f8f4 := &svcsdktypes.EncryptionConfiguration{}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f7f8f4f0 := &svcsdktypes.KMSEncryptionConfig{}
					if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f7f8f4f0.AWSKMSKeyARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN
					}
					f7f8f4.KMSEncryptionConfig = f7f8f4f0
				}
				if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f7f8f4.NoEncryptionConfig = svcsdktypes.NoEncryptionConfig(*r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f7f8.EncryptionConfiguration = f7f8f4
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f7f8.ErrorOutputPrefix = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != nil {
				f7f8.Prefix = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil {
				f7f8.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN
			}
			f7.S3Update = f7f8
		}
		if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration != nil {
			f7f9 := &svcsdktypes.SecretsManagerConfiguration{}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled != nil {
				f7f9.Enabled = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.Enabled
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN != nil {
				f7f9.RoleARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.RoleARN
			}
			if r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN != nil {
				f7f9.SecretARN = r.ko.Spec.HTTPEndpointDestinationConfiguration.SecretsManagerConfiguration.SecretARN
			}
			f7.SecretsManagerConfiguration = f7f9
		}
		res.HttpEndpointDestinationUpdate = f7
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDeliveryStreamOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDeliveryStream(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDeliveryStream", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDeliveryStreamInput, error) {
	res := &svcsdk.DeleteDeliveryStreamInput{}

	if r.ko.Spec.DeliveryStreamName != nil {
		res.DeliveryStreamName = r.ko.Spec.DeliveryStreamName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.DeliveryStream,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
